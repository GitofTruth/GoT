#!/usr/bin/env node

// goes to bare
// fetch from local storage
// hopefully executed on pull command


const fs = require('fs');
const { join } = require("path")

let testpath = ".git/objects/"
let defStoragePath = "../../Storage/"
let excptList = ["info", "pack"]


function ListFiles(testFolder){
  let files = []
  fs.readdirSync(testFolder).forEach(file => {
    if( excptList.indexOf(file) > -1){
    }else {
      files = [... files, file]
      // console.log(file);
    }
  });

  return files
}


function GetObjectsName(objHomeDirectory) {
  let names = []
  let dirs = ListFiles(objHomeDirectory)
  dirs.forEach(d => {
    files = ListFiles(objHomeDirectory + d + "/")
    files.forEach(f => {
      names = [...names, d + f]
    })
  })

  return names;
}

function CopyObjects(namesList = [],pulling = true, sourcePath = defStoragePath){
  let destinationPath = "objects/"
  if (!pulling){
    let temp = sourcePath
    sourcePath = destinationPath
    destinationPath = temp
    fs.copyFileSync(sourcePath + "../refs/heads/master" , destinationPath + "../master")
  }else {
    fs.copyFileSync(sourcePath + "../master", destinationPath + "../refs/heads/master")
  }

  console.log("Starting copying files ... from storage")
  console.log("The source Path: " + sourcePath)
  console.log("The destination Path: " + destinationPath)
  let sourceObjs = GetObjectsName(sourcePath)
  let destinationObjs = GetObjectsName(destinationPath)
  let missing = []

  if (namesList.length <= 0){
    namesList = sourceObjs
  }

  if (namesList.length > 0){
    namesList.forEach(n => {
      if(destinationObjs.indexOf(n) == -1){
        missing = [...missing, n]
      }
    })
  }else{
    missing = namesList
  }

  console.log("Found source Objects: ")
  console.log(sourceObjs)
  console.log("Found destination Objects: ")
  console.log(destinationObjs)
  console.log("Missing destination Objects: ")
  console.log(missing)

  missing.forEach( m => {
    if (!fs.existsSync(destinationPath + m.substring(0,2))){
      fs.mkdirSync(destinationPath + m.substring(0,2));
    }
    if(!fs.existsSync(destinationPath + m.substring(0,2) + "/" + m.substring(2))){
      fs.copyFileSync(sourcePath + m.substring(0,2) + "/" + m.substring(2), destinationPath + m.substring(0,2) + "/" + m.substring(2)
      // , (err) => {
      // if (err) throw err;
      // console.log(m + " was added to bare repo");
      // }
    );
    }
  })
  console.log("Done copying files ... from storage\n\n")
}



// const fs = require('fs');
// const yaml = require('js-yaml');
// const { Gateway, FileSystemWallet, DefaultEventHandlerStrategies, Transaction  } = require('fabric-network');
// const gitlog = require('gitlog');
//
// const CONNECTION_PROFILE_PATH = '../profiles/dev-connection.yaml'
// const FILESYSTEM_WALLET_PATH = '../client/user-wallet'
//
// const USER_ID = 'Admin@acme.com'
// const NETWORK_NAME = 'airlinechannel'
// const CONTRACT_ID = "GoT"
//
// const gateway = new Gateway();



async function main() {
  CopyObjects()
  // await setupGateway()
  //
  // let network = await gateway.getNetwork(NETWORK_NAME)
  // const contract = await network.getContract(CONTRACT_ID);
  // let h = await queryContract(contract)
  //
  // fs.writeFile("refs/heads/master", h)
  //
  // process.exit(0);
}


// /**
//  * Queries the chaincode
//  * @param {object} contract
//  */
// async function queryContract(contract){
//     try{
//         // Query the chaincode
//         let response = await contract.evaluateTransaction('getBetween', '0', '100')
//         console.log(`Query Response=${response.toString()}`)
//
//         ////////////////////////////////////////////////////
//         /////////// If there is a bug, it is here///////////
//         ////////////////////////////////////////////////////
//         return response[response.length -1].hash
//
//     } catch(e){
//         console.log(e)
//         return ""
//     }
// }
//
// async function setupGateway() {
//
//     // 2.1 load the connection profile into a JS object
//     let connectionProfile = yaml.safeLoad(fs.readFileSync(CONNECTION_PROFILE_PATH, 'utf8'));
//
//     // 2.2 Need to setup the user credentials from wallet
//     const wallet = new FileSystemWallet(FILESYSTEM_WALLET_PATH)
//
//     // 2.3 Set up the connection options
//     let connectionOptions = {
//         identity: USER_ID,
//         wallet: wallet,
//         discovery: { enabled: false, asLocalhost: true }
//         /*** Uncomment lines below to disable commit listener on submit ****/
//         // , eventHandlerOptions: {
//         //     strategy: null
//         // }
//     }        /*** Uncomment lines below to disable commit listener on submit ****/
//     // , eventHandlerOptions: {
//     //     strategy: null
//     // }
//
//     // 2.4 Connect gateway to the network
//     await gateway.connect(connectionProfile, connectionOptions)
//     // console.log( gateway)
// }
//
//
main()
